/* 变量已经赋值，那就不使用默认值，如果没有赋值，则使用默认值。 */

// $important:  !default;

/* 四条border样式 */

/* 注意：
    1. 元素需要添加position
    2. all-border-1px是加在:after伪类上
*/

@mixin all-border-1px($color, $radius) {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  border: 2px solid $color;
  border-radius: $radius * 2;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  width: 200%;
  height: 200%;
  -webkit-transform: scale(0.5);
  transform: scale(0.5);
  -webkit-transform-origin: left top;
  transform-origin: left top;
}

/* 单条border样式 */

/* 注意：
    1. 元素需要添加position
    2. border-1px是加在:after伪类上
*/

@mixin border-1px($color, $direction) {
  content: '';
  position: absolute;
  background: $color;

  @if $direction==left {
    left: 0;
    top: 0;
    height: 100%;
    width: 2px;
    transform: scaleX(0.5);
    transform-origin: left 0;
  }

  @if $direction==right {
    right: 0;
    top: 0;
    height: 100%;
    width: 2px;
    transform: scaleX(0.5);
    transform-origin: right 0;
  }

  @if $direction==bottom {
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    transform: scaleY(0.5);
    transform-origin: 0 bottom;
  }

  @if $direction==top {
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    transform: scaleY(0.5);
    transform-origin: 0 top;
  }
}

/* 清除浮动 */

/* 注意：
    用在父元素的:after伪类上
*/

@mixin clearfloat() {
  content: '.';
  display: block;
  width: 0;
  height: 0;
  clear: both;
  visibility: hidden;
}

// 另一中清除浮动，直接用于父元素
@mixin clearboth {
  &:before,
  &:after {
    display: table;
    content: ' ';
  }

  &:after {
    clear: both;
  }
}

/* px2rem */

/* 注意：
    1. 移动端项目自带px2npm包，不需要使用该方法
    2. 转换比率默认是100
*/

@function px2rem($px) {
  @return $px / 100px * 1rem;
}

/* 超出文本显示'...' */

/* 注意：
    $line是行数。默认1行
*/

@mixin ellipsis($line: 1) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-all;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $line;
}

// 旧版本 1行
// @mixin ellipsis($w) {
//     width: $w;
//     overflow: hidden;
//     text-overflow: ellipsis;
//     white-space: nowrap;
// }

/* 定位全屏 */

@mixin all-cover {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

/* 定位上下左右居中 */

@mixin center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* 定位上下居中 */

@mixin center-tb {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/* 定位左右居中 */

@mixin center-lr {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/* 宽高 */

@mixin wh($w, $h) {
  width: $w;
  height: $h;
}

/* 字体 大小、行高、字体 */

@mixin font-slf($size, $line-height, $family: 'Microsoft YaHei') {
  font: #{$size}/#{$line-height} $family;
}

/* 字体 大小，颜色 */

// @mixin font-sc($size, $color, $import: $important) {
//   font-size: $size $import;
//   color: $color $import;
// }
@mixin font-sc($size, $color) {
  font-size: $size;
  color: $color;
}

/* 文字裁剪 // ??? */

@mixin hide-text {
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

/* 一段文本左右对其，类似于flex的space-around */

/*
   注意：
    例子
        <span>姓名</span>：<input type="text">
        <span>电话号码</span>：<input type="text">
    使用在span元素上，宽度不能小于文字宽度
*/

@mixin text-space-around($width) {
  position: relative;
  float: left;
  width: $width;
  text-align: justify;
  text-align-last: justify;

  &:after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    display: inline-block;
    width: 100%;
  }
}

/* 背景图片拉伸沾满宽高 */

@mixin bgimg-stretch($url) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-size: 100% 100%;
}

/* 背景图片适应元素宽高，不拉伸，超出部分隐藏 */

@mixin bgimg-cover($url) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-position: center center;
  background-size: cover;
}

/* flex布局 父容器 */

@mixin flex(
  $flex-direction: row,
  $flex-wrap: nowrap,
  $justify-content: space-between,
  $align-items: center,
  $align-content: stretch
) {
  display: flex;
  flex-direction: $flex-direction; // 主轴的方向,
  flex-wrap: $flex-wrap; // 换行,
  justify-content: $justify-content; // 主轴对其方式,
  align-items: $align-items; // 交叉轴对其方式,(如果项目未设置高度或设为auto，将占满整个容器的高度).
  align-content: $align-content; // 多根轴线的对齐方式,(轴线占满整个交叉轴).
}

/* flex布局 子元素 */

@mixin flex-item(
  $order: 0,
  $flex-grow: 0,
  $flex-shrink: 1,
  $flex-basis: auto,
  $align-self: auto
) {
  order: $order; // 排列顺序,数值越小越靠前,可以为负
  flex-grow: $flex-grow; // 放大比例(如果存在剩余空间，也不放大).
  flex-shrink: $flex-shrink; // 缩小比例(即如果空间不足，该项目将缩小) *负值对该属性无效*.
  flex-basis: $flex-basis; // 分配多余空间之前，项目占据的主轴空间
  align-self: $align-self; // 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性(继承父元素的align-items属性，如果没有父元素，则等同于stretch).
}
